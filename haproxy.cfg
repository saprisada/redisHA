global
    daemon
    maxconn 30000

defaults
    mode tcp
    log global
    option tcplog
    option dontlognull
    maxconn 30000
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms

#HAProxy stats page
listen stats
    bind *:8888
    stats enable
    mode http
    #replace the following auth-string with your own
    stats auth admin:admin

#Read-traffic load-balance
listen redis-read
    bind *:16479
    mode tcp
    balance roundrobin
    option tcp-check
    tcp-check connect <port>
    #comment following 2 lines if your redis server doesn't requirepass
    tcp-check send AUTH\ <your-passphrase>\r\n
    tcp-check expect string +OK
    #if you want to balance read-traffic between both slaves and master, comment following 2 lines and decomment the PING/+PONG lines
    tcp-check send info\ replication\r\n
    tcp-check expect string role:slave
    #tcp-check send PING\r\n
    #tcp-check expect string +PONG
    tcp-check send QUIT\r\n
    tcp-check expect string +OK
    server redis-1 <ip>:<port> maxconn 5000 check inter 2s
    server redis-2 <ip>:<port> maxconn 5000 check inter 2s
    server redis-3 <ip>:<port> maxconn 5000 check inter 2s

#Write-traffic HA
frontend redis-write
    mode tcp
    option tcplog
    bind *:16379
    #if you have more than 3 sentinels, please change the "ge 2" to a number meets the quorum of sentinels
    #below lines means to forward write traffic to the redis server which is identified as master both by itself and sentinels
    use_backend redis-master-1 if { srv_is_up(redis-master-1/redis) } { nbsrv(mastercheck-redis-1) ge 2 }
    use_backend redis-master-2 if { srv_is_up(redis-master-2/redis) } { nbsrv(mastercheck-redis-2) ge 2 }
    use_backend redis-master-3 if { srv_is_up(redis-master-3/redis) } { nbsrv(mastercheck-redis-3) ge 2 }
    #if cannot find a valid master, fall back to legacy mode, which forward write traffic to the first redis server who identifies itself as master
    default_backend redis-legacy

#Following 3 backends tells if the 3 redis server identify themselves as masters
backend redis-master-1
    mode tcp
    balance first
    option tcp-check
    tcp-check connect <port>
    #comment following 2 lines if your redis server doesn't requirepass
    tcp-check send AUTH\ <your-passphrase>\r\n
    tcp-check expect string +OK
    tcp-check send info\ replication\r\n
    tcp-check expect string role:master
    tcp-check send QUIT\r\n
    tcp-check expect string +OK
    server redis <ip>:<port> maxconn 5000 check inter 2s

backend redis-master-2
    mode tcp
    balance first
    option tcp-check
    tcp-check connect <port>
    #comment following 2 lines if your redis server doesn't requirepass
    tcp-check send AUTH\ <your-passphrase>\r\n
    tcp-check expect string +OK
    tcp-check send info\ replication\r\n
    tcp-check expect string role:master
    tcp-check send QUIT\r\n
    tcp-check expect string +OK
    server redis <ip>:<port> maxconn 5000 check inter 2s

backend redis-master-3
    mode tcp
    balance first
    option tcp-check
    tcp-check connect <port>
    #comment following 2 lines if your redis server doesn't requirepass
    tcp-check send AUTH\ <your-passphrase>\r\n
    tcp-check expect string +OK
    tcp-check send info\ replication\r\n
    tcp-check expect string role:master
    tcp-check send QUIT\r\n
    tcp-check expect string +OK
    server redis <ip>:<port> maxconn 5000 check inter 2s

#Following 3 backends tells if sentinels identify the 3 redis servers as masters
backend mastercheck-redis-1
    mode tcp
    option tcp-check
    tcp-check connect <port>
    tcp-check send SENTINEL\ master\ <your-master-name>\r\n
    tcp-check expect string <ip-of-redis-server-1>
    tcp-check send QUIT\r\n
    tcp-check expect string +OK
    server sentinel-1 <ip>:<port> check inter 2s
    server sentinel-2 <ip>:<port> check inter 2s
    server sentinel-3 <ip>:<port> check inter 2s

backend mastercheck-redis-2
    mode tcp
    option tcp-check
    tcp-check connect <port>
    tcp-check send SENTINEL\ master\ <your-master-name>\r\n
    tcp-check expect string <ip-of-redis-server-2>
    tcp-check send QUIT\r\n
    tcp-check expect string +OK
    server sentinel-1 <ip>:<port> check inter 2s
    server sentinel-2 <ip>:<port> check inter 2s
    server sentinel-3 <ip>:<port> check inter 2s

backend mastercheck-redis-3
    mode tcp
    option tcp-check
    tcp-check connect <port>
    tcp-check send SENTINEL\ master\ <your-master-name>\r\n
    tcp-check expect string <ip-of-redis-server-3>
    tcp-check send QUIT\r\n
    tcp-check expect string +OK
    server sentinel-1 <ip>:<port> check inter 2s
    server sentinel-2 <ip>:<port> check inter 2s
    server sentinel-3 <ip>:<port> check inter 2s

#The legacy HA mode
backend redis-legacy
    mode tcp
    balance first
    option tcp-check
    tcp-check connect <port>
    #comment following 2 lines if your redis server doesn't requirepass
    tcp-check send AUTH\ <your-passphrase>\r\n
    tcp-check expect string +OK
    tcp-check send info\ replication\r\n
    tcp-check expect string role:master
    tcp-check send QUIT\r\n
    tcp-check expect string +OK
    server redis-1 <ip>:<port> maxconn 5000 check inter 2s
    server redis-2 <ip>:<port> maxconn 5000 check inter 2s
    server redis-3 <ip>:<port> maxconn 5000 check inter 2s
